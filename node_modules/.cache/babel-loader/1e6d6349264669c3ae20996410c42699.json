{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom'; // import Lodash from './lodash';\n// import ReactMotion from './react-motion';\n\nimport './index.css'; // import App from './App';\n// import reportWebVitals from './reportWebVitals';\n// function App() {\n//   return (\n//     <h1>MyApp</h1>\n//   );\n// }\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n// initializing react component constants\n\nconst {\n  Component\n} = React;\nconst {\n  render\n} = ReactDOM;\nconst {\n  Motion,\n  spring\n} = ReactMotion; // const {range} = _;\n// css structure for the style of the tiles themselves\n\nconst tilesStyle = {\n  listStyle: 'none',\n  margin: '0 auto',\n  padding: 5,\n  position: 'relative'\n}; // css structure for the each individual tile\n\nconst tileStyle = {\n  backgroundColor: 'grey',\n  boxShadow: 'inset 0 0 1px 0 black',\n  boxSizing: 'border-box',\n  display: 'block',\n  padding: 6,\n  position: 'absolute'\n}; // css structure for the hole in the game style\n\nconst holeStyle = {\n  opacity: 0\n}; // css structure for button (at the bottom)\n\nconst buttonStyle = {\n  display: 'block',\n  margin: '16px auto',\n  padding: '8px 16px'\n}; // a function that mathematically checks whether or not the \n// the game is solvable\n\nfunction isSolvable(numbers, rows, cols) {\n  let product = 1;\n\n  for (let i = 1, l = rows * cols - 1; i <= l; i++) {\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\n      product *= (numbers[i - 1] - numbers[j - 1]) / (i - j);\n    }\n  }\n\n  return Math.round(product) === 1;\n} // checks to see if the game is solved or not\n\n\nfunction isSolved(numbers) {\n  for (let i = 0, l = numbers.length; i < l; i++) {\n    if (numbers[i] !== i) {\n      return false;\n    }\n  }\n} // get position in a linear matrix\n\n\nfunction getLinearPosition({\n  row,\n  col\n}, rows, cols) {\n  return parseInt(row, 10) * cols + parseInt(col, 10);\n} // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();","map":{"version":3,"sources":["/Users/rayaq/Desktop/SlidingPuzzle/sliding-puzzle/src/index.js"],"names":["React","ReactDOM","Component","render","Motion","spring","ReactMotion","tilesStyle","listStyle","margin","padding","position","tileStyle","backgroundColor","boxShadow","boxSizing","display","holeStyle","opacity","buttonStyle","isSolvable","numbers","rows","cols","product","i","l","j","m","Math","round","isSolved","length","getLinearPosition","row","col","parseInt"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;;AACA,OAAO,aAAP,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAcF,KAApB;AACA,MAAM;AAACG,EAAAA;AAAD,IAAWF,QAAjB;AACA,MAAM;AAACG,EAAAA,MAAD;AAASC,EAAAA;AAAT,IAAmBC,WAAzB,C,CACA;AAEA;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,MADM;AAEjBC,EAAAA,MAAM,EAAE,QAFS;AAGjBC,EAAAA,OAAO,EAAE,CAHQ;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAAnB,C,CAOA;;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAE,MADD;AAEhBC,EAAAA,SAAS,EAAE,uBAFK;AAGhBC,EAAAA,SAAS,EAAE,YAHK;AAIhBC,EAAAA,OAAO,EAAE,OAJO;AAKhBN,EAAAA,OAAO,EAAE,CALO;AAMhBC,EAAAA,QAAQ,EAAE;AANM,CAAlB,C,CASA;;AACA,MAAMM,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE;AADO,CAAlB,C,CAIA;;AACA,MAAMC,WAAW,GAAG;AAClBH,EAAAA,OAAO,EAAE,OADS;AAElBP,EAAAA,MAAM,EAAE,WAFU;AAGlBC,EAAAA,OAAO,EAAE;AAHS,CAApB,C,CAMA;AACA;;AACA,SAASU,UAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AACxC,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,IAAI,GAACC,IAAL,GAAU,CAA9B,EAAiCE,CAAC,IAAIC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAC,CAAV,EAAaG,CAAC,GAAGF,CAAC,GAAC,CAAxB,EAA2BC,CAAC,IAAIC,CAAhC,EAAmCD,CAAC,EAApC,EAAwC;AACtCH,MAAAA,OAAO,IAAI,CAACH,OAAO,CAACI,CAAC,GAAC,CAAH,CAAP,GAAeJ,OAAO,CAACM,CAAC,GAAC,CAAH,CAAvB,KAAiCF,CAAC,GAACE,CAAnC,CAAX;AACD;AACF;;AACD,SAAOE,IAAI,CAACC,KAAL,CAAWN,OAAX,MAAwB,CAA/B;AACD,C,CAED;;;AACA,SAASO,QAAT,CAAkBV,OAAlB,EAA2B;AACzB,OAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,OAAO,CAACW,MAA5B,EAAoCP,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,QAAGJ,OAAO,CAACI,CAAD,CAAP,KAAeA,CAAlB,EAAqB;AACnB,aAAO,KAAP;AACD;AACF;AACF,C,CAED;;;AACA,SAASQ,iBAAT,CAA2B;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAA3B,EAAuCb,IAAvC,EAA6CC,IAA7C,EAAmD;AACjD,SAAOa,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAR,GAAoBX,IAApB,GAA2Ba,QAAQ,CAACD,GAAD,EAAM,EAAN,CAA1C;AACD,C,CAED;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Lodash from './lodash';\n// import ReactMotion from './react-motion';\nimport './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// function App() {\n//   return (\n//     <h1>MyApp</h1>\n//   );\n// }\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// initializing react component constants\nconst {Component} = React;\nconst {render} = ReactDOM;\nconst {Motion, spring} = ReactMotion;\n// const {range} = _;\n\n// css structure for the style of the tiles themselves\nconst tilesStyle = {\n  listStyle: 'none',\n  margin: '0 auto', \n  padding: 5, \n  position: 'relative'\n};\n\n// css structure for the each individual tile\nconst tileStyle = {\n  backgroundColor: 'grey',\n  boxShadow: 'inset 0 0 1px 0 black',\n  boxSizing: 'border-box',\n  display: 'block',\n  padding: 6,\n  position: 'absolute'\n};\n\n// css structure for the hole in the game style\nconst holeStyle = {\n  opacity: 0\n};\n\n// css structure for button (at the bottom)\nconst buttonStyle = {\n  display: 'block',\n  margin: '16px auto',\n  padding: '8px 16px'\n};\n\n// a function that mathematically checks whether or not the \n// the game is solvable\nfunction isSolvable (numbers, rows, cols) {\n  let product = 1;\n  for (let i = 1, l = rows*cols-1; i <= l; i++) {\n    for (let j = i+1, m = l+1; j <= m; j++) {\n      product *= (numbers[i-1] - numbers[j-1]) / (i-j);\n    }\n  }\n  return Math.round(product) === 1;\n}\n\n// checks to see if the game is solved or not\nfunction isSolved(numbers) {\n  for (let i = 0, l = numbers.length; i < l; i++) {\n    if(numbers[i] !== i) {\n      return false;\n    }\n  }\n}\n\n// get position in a linear matrix\nfunction getLinearPosition({row, col}, rows, cols) {\n  return parseInt(row, 10) * cols + parseInt(col, 10);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"]},"metadata":{},"sourceType":"module"}